class Solution {
  public:
    bool isSubsetSum(vector<int>& arr, int sum) {
        int n = arr.size();
        vector<vector<bool>> dp(n+1, vector<bool>(sum+1, false));

        // base cases
        for (int i = 0; i <= n; i++) dp[i][0] = true;   // sum=0 is always possible
        for (int j = 1; j <= sum; j++) dp[0][j] = false; // no items, nonzero sum â†’ false

        // DP transition
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= sum; j++) {
                if (arr[i-1] <= j) {
                    dp[i][j] = dp[i-1][j] || dp[i-1][j - arr[i-1]];
                } else {
                    dp[i][j] = dp[i-1][j];
                }
            }
        }

        return dp[n][sum];
    }
};
