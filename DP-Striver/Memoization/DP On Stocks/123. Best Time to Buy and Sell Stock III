class Solution {
public:
    int n;
    vector<vector<vector<int>>> dp;

    int fun(int i, int buy, int tcs, vector<int>& prices) {
        if (i == n || tcs == 0) return 0; 
        if (dp[i][buy][tcs] != -1) return dp[i][buy][tcs];

        if (buy) {
            return dp[i][buy][tcs] = max(-prices[i] + fun(i + 1, 0, tcs, prices),
                                                      fun(i + 1, 1, tcs, prices));
        } else {
            return dp[i][buy][tcs] = max(prices[i] + fun(i + 1, 1, tcs - 1, prices),
                                                     fun(i + 1, 0, tcs, prices));
        }
    }

    int maxProfit(vector<int>& prices) {
        n = prices.size();
        dp.assign(n, vector<vector<int>>(2, vector<int>(3, -1))); 
        return fun(0, 1, 2, prices);  
    }
};