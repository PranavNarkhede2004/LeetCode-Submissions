class Solution {
public:
    vector<vector<int>> dp;
    bool fun(int ind, int S, vector<int> &nums) {
        if (S == 0) return true;               
        if (ind < 0 || S < 0) return false;     
        if(dp[ind][S]!=-1){
            return dp[ind][S];
        }else{
                bool not_taken = fun(ind - 1, S, nums);
                bool taken = false;
                if (nums[ind] <= S) {                 
                    taken = fun(ind - 1, S - nums[ind], nums);
                }
                return dp[ind][S]=taken || not_taken;
        }

    }

    bool canPartition(vector<int>& nums) {
        int sum = 0, n = nums.size();
        
        for (int i = 0; i < n; i++) sum += nums[i];

        if (sum % 2 == 1) return false;  
        if (n == 1) return false;

        int S = sum / 2;
        dp.assign(n,vector<int> (S+1,-1));
        return fun(n - 1, S, nums);
    }
};
