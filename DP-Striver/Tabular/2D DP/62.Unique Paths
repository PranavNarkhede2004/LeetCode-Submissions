// class Solution {
// public:
//     vector<vector<int>> dp;
//     int fun(int n,int m){
//         if(n==0 && m==0) return 1;
//         if(n<0 || m<0) return 0;
//         if(dp[n][m]==-1){
//             return dp[n][m]=fun(n-1,m)+fun(n,m-1);
//         }else return dp[n][m];
        
//     }
//     int uniquePaths(int m, int n) {
//         dp.assign(n,vector<int> (m,-1));
//         return fun(n-1,m-1);
//     }
// };

class Solution {
public:
    int uniquePaths(int m, int n) {
        vector<vector<int>> dp(n,vector<int>(m));
        dp[0][0]=1;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                int down=0,right=0;
                if(i==0 && j==0) continue;
                if(i>0) down=dp[i-1][j];
                if(j>0) right=dp[i][j-1];
                dp[i][j]=right+down;
            }
        }
        return dp[n-1][m-1];
    }
};