class Solution {
public:
    int n;
    vector<vector<vector<int>>> dp;
    int maxProfit(vector<int>& prices) {
        n = prices.size();
        dp.assign(n+1, vector<vector<int>>(2, vector<int>(3, 0))); 
        vector<vector<int>> prev(2,vector<int>(3,0)),curr(2,vector<int>(3,0));
        for(int i=n-1;i>=0;i--){
            for(int j=0;j<2;j++){
                for(int k=1;k<3;k++){
                    if(j==1){
                        // j==1 means we can buy stock
                        dp[i][j][k]=max(-prices[i] + dp[i + 1][0][k], dp[i + 1][1][k]);

                    }else{
                        dp[i][j][k]=max(prices[i] + dp[i + 1][1][k-1], dp[i + 1][0][k]);
                    }
                }
            }
        }
        return dp[0][1][2];  
    }
};

space optimization


class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int n = prices.size();
        vector<vector<int>> next(2,vector<int>(3,0)),curr(2,vector<int>(3,0));
        for(int i=n-1;i>=0;i--){
            for(int j=0;j<2;j++){
                for(int k=1;k<3;k++){
                    if(j==1){
                        // j==1 means we can buy stock
                        curr[j][k]=max(-prices[i] + next[0][k], next[1][k]);

                    }else{
                        curr[j][k]=max(prices[i] + next[1][k-1], next[0][k]);
                    }
                }
            }
            next=curr;
        }
        return next[1][2];  
    }
};