class Solution {
public:
    vector<vector<int>> dp;
    int knapSack(vector<int>& val, vector<int>& wt, int capacity) {
        int n = val.size();
        dp.assign(n, vector<int>(capacity + 1, 0));

        // Base case
        for (int i = 0; i <= capacity; i++) {
            dp[0][i] = (i / wt[0]) * val[0];
        }

        for (int i = 1; i < n; i++) {
            for (int j = 0; j <= capacity; j++) {
                int not_take = dp[i-1][j];
                int take = 0;
                if (wt[i] <= j) {
                    take = val[i] + dp[i][j - wt[i]];
                }
                dp[i][j] = max(take, not_take);
            }
        }

        return dp[n-1][capacity];
    }
};
